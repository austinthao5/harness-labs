pipeline:
  name: test-push-pipeline
  identifier: testpushpipeline
  projectIdentifier: CSE_Lab_Project
  orgIdentifier: CSE_Labs
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.accountharnesslabs
        repoName: harness-labs
        build: <+input>
  stages:
    - stage:
        name: test
        identifier: test
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: csegcpcluster
              namespace: austin-test-ns
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: tests
                  identifier: tests
                  spec:
                    connectorRef: account.AT_Docker
                    image: python:latest
                    shell: Sh
                    command: |-
                      # Install dependencies.
                      pip install -r requirements.txt

                      # Call split_tests, define splitting strategy, and generate the list of test files.
                      FILES=`/addon/bin/split_tests --glob "**/test_*.py" --split-by file_timing \
                         --split-index ${HARNESS_NODE_INDEX} \
                         --split-total ${HARNESS_NODE_TOTAL}`
                      echo $FILES

                      # Use the test files list as input for pytest and produce results in JUnit XML format.
                      pytest -v --junitxml="result.xml" $FILES
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "**/result.xml"
                    envVariables:
                      HARNESS_NODE_INDEX: <+strategy.iteration>
                      HARNESS_NODE_TOTAL: <+strategy.iterations>
        strategy:
          parallelism: 4
